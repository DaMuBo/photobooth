[tool.poetry]
name = "pyfotobooth"
version = "0.1.0"
description = "Fotobooth project with backend frontend controller"
authors = ["DaMuBo <daniel910527@googlemail.com>"]
packages = [{include = "src", from = "."}]

[tool.poetry.scripts]
app = "src.frontend.flask_app:main"

[tool.coverage.run]
omit = [
    #omit everything with demo in path or filename, as it is only PoC code
    "*demo*.py","src/demo/*"
]

[tool.ruff]
line-length = 110
exclude = ["./src/demo/**"]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    # at least this three should be fine in tests:
    "S101", # asserts allowed in tests...
    "ARG", # Unused function args -> fixtures nevertheless are functionally relevant...
    "FBT", # Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
    # The below are debateable
    "PLR2004", # Magic value used in comparison, ...
    "S311", # Standard pseudo-random generators are not suitable for cryptographic purposes
    "SLF001", # Accessed private Member
]
"noxfile.py" = [
  "ERA001" # find commented out code
]
"src/frontend/routes/route_gst_pipes.py" = [
    "E402",
    "PLW0603"
]

[tool.ruff.format]
quote-style = "double"
docstring-code-format = true

[tool.ruff.lint]
select = [
  'E',      # pycodestyle errors
  'W',      # pycodestyle warnings
  'F',      # Pyflakes
  'D',      # pydocstyle
  'B',      # flake8-bugbear
  'A',      # flake8-builtins
  'COM',    # flake8-commas
  'C4',     # flake8-comprehensions
  'EM',     # flake8-errmsg
  'ISC',    # flake8-implicit-str-concat
  'INP001', # flake8-no-pep420
  'PIE',    # flake8-pie
  'T20',    # flake8-print
  'PYI',    # flake8-pyi
  'Q',      # flake8-quotes
  'RSE',    # flake8-raise
  'SLF',    # flake8-self
  'PTH',    # flake8-use-pathlib
  'SIM',    # flake8-simplify
  'S101',   # Use of assert detected
  'S102',   # Use of exec detected
  'S110',   #	try-except-pass detected, consider logging the exception
  'S112',   # try-except-continue detected, consider logging the exception
  # 'FIX',    # Line contains TODO
  'ERA',    # eradicate
  'PL',     # Pylint
  'PERF',   # Perflint
  'RUF',
]
ignore = [
  'D100',    # Missing docstring in public module
  'D104',    # Missing docstring in public package
  'D415',    # First line should end with a period
  'D416',    # section-name-ends-in-colon
  'SIM108',  # Check for if-else-blocks that can be replaced with a ternary operator.
  'PTH123',  # open()` should be replaced by `Path.open()
  'PLR091',  # Too many x
  'PLR1714', # Consider merging multiple comparisons
  'PERF401', # Use a list comprehension to create a transformed list
  'PERF203', # Checks for uses of except handling via try-except within for and while loops.
  'RUF005',  # Consider `[*arr, 'new_item']` instead of concatenation
  'COM812',
  'ISC001',
  'D203',
  'D213',
]
task-tags = ["TODO"]


[tool.poetry.dependencies]
python = "^3.9"
segno = "^1.6.0"
pillow = "^10.1.0"
boto3 = "^1.34.9"
flask = "^3.0.2"
gunicorn = "^21.2.0"
requests = "^2.31.0"
python-dotenv = "^1.0.1"
urllib3 = "1.26.18"
pydantic = "^2.8.2"
pyyaml = "^6.0.1"


[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"
pylint = "^3.0.3"
nox = "^2024.4.15"
ruff = "^0.5.1"
mypy = "^1.10.1"
pytest-coverage = "^0.0"
pytest-mock = "^3.14.0"
pytest-timeout = "^2.3.1"
pytest-parametrization = "^2022.2.1"
types-pillow = "^10.2.0.20240520"

[tool.poetry.group.prod]
optional = true

[tool.poetry.group.prod.dependencies]
pycups = "^2.0.1"
pygobject = "^3.48.2"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

